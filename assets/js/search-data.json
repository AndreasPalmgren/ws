{
  
    
        "post0": {
            "title": "Forecasting temperature with SARIMA",
            "content": "1. Introduction . Weather forecasting is a difficult but important task. All predictions have a degree of uncertainty, but the chaotic character of our atmosphere causes weather forecasting to become especially challenging. As you might have experienced yourself, day-to-day weather prediction becomes unreliable more than a week into the future. . The aim for this project is to find an appropriate ARIMA model able to forecast monthly mean air temperature in Stockholm. . library(plotly) library(ggplot2) library(ggfortify) library(repr) library(tidyr) library(tsibble) library(TSstudio) library(zoo) library(dplyr) library(tseries) library(forecast) library(ggridges) library(viridis) library(hrbrthemes) library(heatmaply) library(gridExtra) Sys.setlocale(locale = &quot;English&quot;) windowsFonts(Times=windowsFont(&quot;Times New Roman&quot;)) options(repr.plot.width=14, repr.plot.height=8) # Center position of plots IRdisplay::display_html(&#39;&lt;style&gt;.output_png { display: table-cell; text-align: center; vertical-align: middle; }&lt;/style&gt;&#39;) th &lt;- theme(text=element_text(size = 20, face = &quot;bold&quot;, family=&quot;Times&quot;), plot.title = element_text(size = 25, face = &quot;bold&quot;, family=&quot;Times&quot;, hjust = 0.5), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank(), panel.background = element_rect(fill = &quot;white&quot;), panel.grid = element_line(size = 0.25, linetype = &#39;solid&#39;, colour = &quot;grey80&quot;)) . . &#39;LC_COLLATE=English_United States.1252;LC_CTYPE=English_United States.1252;LC_MONETARY=English_United States.1252;LC_NUMERIC=C;LC_TIME=English_United States.1252&#39; 2. Data source . The underlying data consist of historical weather observation of monthly mean air temperature in Stockholm. . Reference Anders Moberg (2021) Stockholm Historical Weather Observations — Monthly mean air temperatures since 1756. Dataset version 3. Bolin Centre Database. https://doi.org/10.17043/stockholm-historical-monthly-temperature-3 . train_df &lt;- read.csv(&quot;dataset/train_stockholm_monthly_mean_temperature.csv&quot;, sep=&#39;;&#39;) test_df &lt;- read.csv(&quot;dataset/test_stockholm_monthly_mean_temperature.csv&quot;, sep=&#39;;&#39;) df &lt;- rbind(train_df, test_df) head(df) . A data.frame: 6 × 13 yearjanfebmaraprmayjunjulaugsepoctnovdec . &lt;int&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt;&lt;dbl&gt; . 11980 | -4.7 | -6.2 | -3.1 | 4.8 | 7.8 | 15.6 | 16.8 | 14.6 | 12.8 | 5.7 | 0.0 | -0.8 | . 21981 | -4.0 | -2.7 | -2.2 | 3.9 | 10.8 | 12.6 | 16.4 | 14.6 | 11.7 | 6.5 | 1.1 | -5.7 | . 31982 | -7.2 | -4.0 | 1.1 | 4.1 | 9.4 | 12.5 | 17.4 | 17.0 | 12.3 | 7.6 | 4.5 | 0.3 | . 41983 | 0.7 | -3.8 | -0.1 | 4.0 | 10.2 | 14.0 | 18.0 | 17.8 | 12.4 | 7.5 | 1.2 | -1.1 | . 51984 | -3.0 | -1.7 | -2.0 | 5.3 | 10.9 | 13.3 | 15.3 | 16.4 | 10.6 | 8.9 | 4.3 | 0.8 | . 61985 | -9.0 | -11.6 | -1.7 | 1.6 | 9.0 | 13.6 | 15.9 | 15.4 | 10.3 | 8.0 | 0.3 | -4.3 | . train &lt;- ts(as.vector(t(as.matrix(train_df[,-1]))), start=c(min(train_df$year), 1), end=c(max(train_df$year), 12), frequency =12) test &lt;- ts(as.vector(t(as.matrix(test_df[,-1]))), start=c(2017, 1), end=c(2020, 12), frequency =12) df_ts &lt;- ts(as.vector(t(as.matrix(df[,-1]))), start=c(1980, 1), end=c(2020, 12), frequency =12) # Reshaped version for visualization train_reshape &lt;- data.frame(date=as.Date(as.yearmon(time(train))), temp=as.matrix(train)) train_reshape$month &lt;- format(train_reshape$date, &quot;%b&quot;) train_reshape$year &lt;- format(train_reshape$date, &quot;%Y&quot;) . . 3. Data analysis . 3.1 Data visualization . We must gain a better understanding of our time series by inspection, and the most intuitive way of doing this is through a line plot. As seen in the figure below, our time series is clearly not stationary. It does not appear to be any obvious trend but a seasonal pattern can be seen and we should investigate this further. Our dataset might suffer from seasonal outliers, as some peaks deviate heavily from others. . ggplot(data=train_reshape, aes(x=date, y=temp, group=1))+ ggtitle(&quot;Monthly Mean Air Temperature (°C)&quot;)+ geom_line(color=&quot;blue&quot;, size=1.2)+ xlab(&quot; nYear&quot;) + ylab(&quot;°C&quot;) + th + theme(legend.position=&quot;none&quot;) . . Dealing with monthly data, a ridgeplot over all months gives further insight. Annual seasonal pattern is strong. January and February might suffer from outliers and should be investigated. . ggplot(train_reshape, aes(x = temp, y = factor(month, levels = month.abb), fill = ..x..))+ geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, lwd=1.2) + scale_fill_viridis(name = &quot;Temp. [F]&quot;, option = &quot;A&quot;) + labs(title = &#39;Ridge plot for Monthly temperatures (°C)&#39;) + scale_y_discrete(limits=rev) + xlab(&quot;°C&quot;) + ylab(&quot;&quot;) + th + theme(axis.line = element_line(size = 2, colour = &quot;grey80&quot;)) . . Picking joint bandwidth of 0.787 . Boxplot is a better alternative to visualize outliers. Variance differ between months. . ggplot(train_reshape, aes(x = factor(month, levels = month.abb), y = temp, fill=factor(month, levels = month.abb)))+ geom_boxplot(outlier.alpha = 0, alpha=0.3, lwd=1.2) + geom_jitter(size=2.4, position=position_jitter(0.23), aes(colour=factor(month, levels = month.abb)))+ xlab(&quot; nMonth&quot;) + ylab(&quot;°C&quot;) + th + theme(legend.position=&quot;none&quot;) . . By inspecting a seasonal subseries plot, we see how potential outliers reside in the earlier years. Our dataset might suffer from strucural breaks. . ggsubseriesplot(train) + ylab(&quot;Temperature&quot;) + ggtitle(&quot;Seasonal subseries plot&quot;) + th . . Dealing with temperature, a heatmap could also be an intuitive way of visualizing our dataset. The lowest temperatures are recorded during February 1985 and January 1987. We have already identified these outliers. But it also appears to become warmer in July and August after 1993.. . dt &lt;- as.matrix(train_df[,-1]) ggplot(train_reshape, aes(factor(month, levels = month.abb), year, fill= temp)) + geom_tile() + scale_fill_distiller(palette = &quot;RdBu&quot;) + th . . Our seasonal component is clear at this point and is once again confirmed by plotting the sample autocorrelation function (ACF). No clear trend seem to be apparent but strong seasonal component. . ggAcf(train, lag.max = 36) + labs(title = &#39;ACF plot&#39;)+ th . . With monthly data, our dominating period is obviosly 12. The periodogram can be useful to identify other periods or if one is unsure of dominating period. Following periodogram is calculated using a fast Fourier transform and smooth through a series of modified Daniell smoothers. . spec.pgram(train, log=&quot;no&quot;, main=&quot;Raw Periodogram&quot;) . 3.2 Stationarity . Seasonal differencing is the difference between the observation and corresponding observation from pervious year. $$ y_t&#39; = y_t - y_{t-12} $$ After taking the first seasonal difference, the time series do look staionary. . # Seasonal difference train.diff = diff(train, lag=12) autoplot(train.diff, xlab=&quot;Year&quot;, ylab=&quot;Temperature (°C)&quot;)+ ggtitle(&quot;First Seasonal Difference&quot;)+ th + guides(colour = guide_legend(title.hjust = 20)) . . Augmented Dicker-Fuller test. . Rejection of null hypothesis, evidence of stationarity. It should be noted however most unit root tests do have a high type 1 error rate, that is incorrect rejection of a true null hypothesis. . adf.test(train.diff) . Warning message in adf.test(train.diff): &#34;p-value smaller than printed p-value&#34; . Augmented Dickey-Fuller Test data: train.diff Dickey-Fuller = -6.5205, Lag order = 7, p-value = 0.01 alternative hypothesis: stationary . Kwiatkowski-Phillips-Schmidt-Shin (KPSS) test. . Check if the time series is stationary around a deterministic trend. Presence of unit root is not the null hypothesis but rather the alternative. . kpss.test(train.diff) . Warning message in kpss.test(train.diff): &#34;p-value greater than printed p-value&#34; . KPSS Test for Level Stationarity data: train.diff KPSS Level = 0.021325, Truncation lag parameter = 5, p-value = 0.1 . 3.3 Possible transformations . The dataset has some problematic characteristics which might not be captured by an ordinary ARIMA model. Our training period is long, with 40 years of observations. How old observations are still relevant in predicting future temperature? Signs of structural breaks have been spotted and it might prove wise to use a shorter training period. . 4. Model building . Modeling will be done through manual configuration as well as automatic selection. Our chosen model will be investigated for residual errors. . Let d and D be nonnegative integers, then {$X _t$} is a $SARIMA(p, d, q) times(P,D,Q) _s$ process is defined by . $$ phi(B) Phi(B^s) (1-B)^d (1-B^s)^DX_t = theta(B) Theta(B^s) Z_t, quad {Z_t} sim WN(0, sigma^2) $$where . $ phi(z) = 1- phi_1 z - ... - phi_p z^p $ | $ Phi(z) = 1- Phi_1 z - ... - Phi_P z^P $ | $ theta(z)= 1- theta_1 z - ... - theta_q z^q $ | $ Theta(z)= 1- Theta_1 z - ... - Theta_Q z^Q $ | . 4.1 Manually configured . Both the ACF and PACF have nonseasonal spikes at lag 1 which are then cut off. This would suggest starting with having p and q equal to one. The ACF has a seasonal spike at lag 12 which then cuts off, while PACF seasonal spikes tails off. It would suggest our time series being described by a seasonal moving average model with one seasonal term (Q = 1). $$ text{ARIMA}(1,0,1) times (0, 1, 1)_{12} $$ . p1 = ggAcf(train.diff, lag.max = 36) + ggtitle(&quot;ACF plot&quot;)+ th p2 = ggPacf(train.diff, lag.max = 36) + ggtitle(&quot;PACF plot&quot;)+ th grid.arrange(p1, p2, ncol=2) . . 4.2 Automatic configuration . One automatic configuration would be a grid search of hyperparameters. The model with lowest AIC came out to be the same model as our manual configuration apart from one additional autoregressive term. . p &lt;- q &lt;- P &lt;- Q &lt;- 0:3 grid &lt;- expand.grid(p=p, q=q, P=P, Q=Q) grid$k &lt;- rowSums(grid) grid &lt;- grid %&gt;% filter(k&lt;=4) arima_search &lt;- lapply(1:nrow(grid), function(i){ mdl &lt;- NULL mdl &lt;- try(arima(train, order=c(grid$p[i], 0, grid$q[i]), seasonal=list(order=c(grid$P[i], 1, grid$Q[i]), period=12), optim.control = list(maxit = 1000))) aic_scores &lt;- data.frame(p = grid$p[i], d=0, q=grid$q[i], P=grid$P[i], D=1, Q=grid$Q[i], AIC = mdl$aic) }) %&gt;% bind_rows() %&gt;% arrange(AIC) head(arima_search) . . A data.frame: 6 × 7 pdqPDQAIC . &lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;int&gt;&lt;dbl&gt;&lt;int&gt;&lt;dbl&gt; . 12 | 0 | 1 | 0 | 1 | 1 | 1828.729 | . 21 | 0 | 2 | 0 | 1 | 1 | 1832.071 | . 31 | 0 | 0 | 0 | 1 | 1 | 1834.952 | . 41 | 0 | 0 | 1 | 1 | 2 | 1835.330 | . 51 | 0 | 1 | 0 | 1 | 1 | 1836.200 | . 62 | 0 | 0 | 0 | 1 | 1 | 1836.403 | . Auto arima does not return the model with lowest AIC score, but has several requirements for what is considered a good model. It will not return models with roots close to the unit circle since forecasts would be numerically unstable. . mdl = auto.arima(train) print(mdl) . Series: train ARIMA(0,0,2)(2,1,0)[12] with drift Coefficients: ma1 ma2 sar1 sar2 drift 0.3054 0.0881 -0.6507 -0.3184 0.0054 s.e. 0.0478 0.0467 0.0467 0.0459 0.0063 sigma^2 = 4.877: log likelihood = -955.75 AIC=1923.51 AICc=1923.71 BIC=1947.92 . 5. Diagnostic checking . Let us investigare our manually configered model. $$ text{ARIMA}(1,0,1) times (0, 1, 1)_{12} $$ . mdl &lt;- arima(train, order = c(1, 0, 1), seasonal=list(order=c(0,1,1)), optim.control = list(maxit = 1000)) checkresiduals(mdl) Box.test(mdl$residuals) . Ljung-Box test data: Residuals from ARIMA(1,0,1)(0,1,1)[12] Q* = 16.774, df = 21, p-value = 0.7247 Model df: 3. Total lags used: 24 . Box-Pierce test data: mdl$residuals X-squared = 0.12694, df = 1, p-value = 0.7216 . cpgram(mdl$residuals, main=&quot;Cumulative Periodogram of the residuals&quot;) . A shipiro wilk-test would reveale evidence against residuals being normally distributed. The QQ-plot help in identifying this departure and it becomes apparent our seasonal outliers are not captured in the model. This is unfortunately a limitation of ARIMA models. . qqnorm(mdl$residuals, pch=1, frame=FALSE) qqline(mdl$residuals, col=&quot;steelblue&quot;, lwd=2) shapiro.test(mdl$residuals) . . Shapiro-Wilk normality test data: mdl$residuals W = 0.99006, p-value = 0.004272 . 6. Forecasting . Let us try and forecast with out model $$ text{ARIMA}(1,0,1) times (0, 1, 1)_{12} $$ . pred &lt;- predict(mdl, n.ahead=48) pred_reshape &lt;- data.frame(date=as.Date(as.yearmon(time(pred$pred))), pred=as.matrix(pred$pred)) se_reshape &lt;- data.frame(date=as.Date(as.yearmon(time(pred$se))), se=as.matrix(pred$se)) test_reshape &lt;- data.frame(date=as.Date(as.yearmon(time(test))), temp=as.matrix(test)) predict &lt;- merge(pred_reshape, se_reshape, by=&quot;date&quot;) %&gt;% merge(test_reshape, by=&quot;date&quot;) . . ggplot() + #geom_line(data=predict, aes(x=date, y = pred+se), color=&quot;red&quot;) + #geom_line(data=predict, aes(x=date, y = pred-se), color=&quot;red&quot;) + geom_line(data=predict, aes(x=date, y = pred), color=&quot;blue&quot;, size=1.3) + geom_ribbon(data=predict, aes(x=date, ymax=pred+se, ymin=pred-se), fill=&quot;pink&quot;, alpha=.5) + geom_line(data=tail(rbind(train_reshape[,c(&quot;date&quot;, &quot;temp&quot;)], test_reshape), n=72), aes(x=date, y = temp), size=1.2) + ggtitle(&quot;Forecast of Monthly Mean Air Temperature&quot;) + xlab(&quot; nYear&quot;) + ylab(&quot;°C&quot;) + th . . Our forecast is doing a good job, but can certainly be improved. Our confidence interval is not able to catch seasonal deviations. . 7. Further improvements . Residuals are not normally distributed and a better model can be found, but it will require more work with the underlying data or the use of a more complex model. . A GARCH model would capture the conditional variance and might give better result than ARIMA could in this case. . Seasonal outliers are not captured by the model. Potentially use less training data and thus avoid seasonal outliers. One must thus determain how long training data is optimal. .",
            "url": "https://andreaspalmgren.github.io/ws/2022/03/23/SthlmMeanTemperature.html",
            "relUrl": "/2022/03/23/SthlmMeanTemperature.html",
            "date": " • Mar 23, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://andreaspalmgren.github.io/ws/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://andreaspalmgren.github.io/ws/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://andreaspalmgren.github.io/ws/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://andreaspalmgren.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}