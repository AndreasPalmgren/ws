{
  
    
        "post0": {
            "title": "Time Serie Analysis - Climate forecasting",
            "content": "import pandas as pd import matplotlib.pyplot as plt import matplotlib.dates as mdates import numpy as np import seaborn as sns sns.set(rc={&#39;figure.figsize&#39;:(10, 8)}) sns.set_style(&#39;darkgrid&#39;, {&#39;axes.linewidth&#39;: 2, &#39;axes.edgecolor&#39;:&#39;black&#39;}) from IPython.core.display import HTML HTML(&quot;&quot;&quot; &lt;style&gt; .output_png { display: table-cell; text-align: center; vertical-align: middle; } &lt;/style&gt; &quot;&quot;&quot;) . Data source . train = pd.read_csv(r&#39;dataset DailyDelhiClimateTrain.csv&#39;) test = pd.read_csv(r&#39;dataset DailyDelhiClimateTest.csv&#39;) # train.dtypes train[&#39;date&#39;] = pd.to_datetime(train[&#39;date&#39;]) train.set_index(&#39;date&#39;, inplace=True) train.info() train.head() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 1462 entries, 2013-01-01 to 2017-01-01 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 meantemp 1462 non-null float64 1 humidity 1462 non-null float64 2 wind_speed 1462 non-null float64 3 meanpressure 1462 non-null float64 dtypes: float64(4) memory usage: 57.1 KB . meantemp humidity wind_speed meanpressure . date . 2013-01-01 10.000000 | 84.500000 | 0.000000 | 1015.666667 | . 2013-01-02 7.400000 | 92.000000 | 2.980000 | 1017.800000 | . 2013-01-03 7.166667 | 87.000000 | 4.633333 | 1018.666667 | . 2013-01-04 8.666667 | 71.333333 | 1.233333 | 1017.166667 | . 2013-01-05 6.000000 | 86.833333 | 3.700000 | 1016.500000 | . # From 2013-01-01 to 2017-01-01 # Only one observation in 2017, thus the last observation is removed. # df.groupby(pd.PeriodIndex(df[&#39;date&#39;], freq=&quot;M&quot;)).size() . #train = df[:-1].groupby(pd.PeriodIndex(df[:-1][&#39;date&#39;], freq=&quot;M&quot;)).mean(); #train.head() . Initial insight . Let us begin by exploring our variables. . train.describe() . meantemp humidity wind_speed meanpressure . count 1462.000000 | 1462.000000 | 1462.000000 | 1462.000000 | . mean 25.495521 | 60.771702 | 6.802209 | 1011.104548 | . std 7.348103 | 16.769652 | 4.561602 | 180.231668 | . min 6.000000 | 13.428571 | 0.000000 | -3.041667 | . 25% 18.857143 | 50.375000 | 3.475000 | 1001.580357 | . 50% 27.714286 | 62.625000 | 6.221667 | 1008.563492 | . 75% 31.305804 | 72.218750 | 9.238235 | 1014.944901 | . max 38.714286 | 100.000000 | 42.220000 | 7679.333333 | . cols_plot = [&#39;meanTemp&#39;, &#39;humidity&#39;, &#39;wind_speed&#39;, &#39;meanpressure&#39;] train.plot(linestyle=&#39;None&#39;, alpha=0.4, marker=&#39;.&#39;, subplots = True); . Remarks . Seasionality within meantemp, humidity and wind_speed. | Outlier in meanpreassure. Potential outliers in wind_speed. | . 1. Investigating variables . 1.1 Mean temperature . 1.1.1 Heat map . Returning the daily values for a second, we can take a quick look into the daily mean temperature with a heat map. As seen in figure below, most of the warmer days reside in the middle of the year. . groups = train[:-1].groupby(pd.PeriodIndex(train[:-1].index.values, freq=&quot;A&quot;)) years = pd.DataFrame() for name, group in groups: years[name.year] = group.reset_index().meantemp axs = plt.matshow(years.T, aspect=&#39;auto&#39;, interpolation=None, cmap=plt.get_cmap(&#39;coolwarm&#39;)); plt.grid() plt.title(&#39;Yearly Heat Map - Daily Mean Temperatures&#39;, fontname=&quot;Times New Roman&quot;, size=20, fontweight=&quot;bold&quot;) plt.tick_params(axis=&#39;x&#39;, bottom=False) plt.yticks(np.arange(4), [&quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;]); . 1.1.2 Line plot . We have already seen a scatter plot of the monthly mean temperature, but let us plot our observations again and investigate. . Observations from the line plot: . Strong seasonal pattern. | Potential trend. | Non-stationary. | . train.head() . meantemp humidity wind_speed meanpressure . date . 2013-01-01 10.000000 | 84.500000 | 0.000000 | 1015.666667 | . 2013-01-02 7.400000 | 92.000000 | 2.980000 | 1017.800000 | . 2013-01-03 7.166667 | 87.000000 | 4.633333 | 1018.666667 | . 2013-01-04 8.666667 | 71.333333 | 1.233333 | 1017.166667 | . 2013-01-05 6.000000 | 86.833333 | 3.700000 | 1016.500000 | . axs = train.loc[:, &quot;meantemp&quot;].plot(linestyle=&#39;None&#39;, alpha=0.4, marker=&#39;.&#39;, figsize=(12, 3)); axs.set_title(&#39;meantemp&#39;, fontname=&quot;Times New Roman&quot;, size=20, fontweight=&quot;bold&quot;); . 1.1.3 Box-and-whisker plot . We can group our data by both months and year. . Observations from figure 1: . Strong seasonality. | Potential outliers or structural breaks. | . Observations from figure 2: . No year seem to differ from another significantly. | . Our training period is quite short since we are looking back on 4 years. Longer periods could have had year-to-year fluctuations not being systematic and thus hard to model. For example, climate data from 1980 would probebly not be representative today. These structural breaks could suggest a benefit in dropping initial years of the training data set. . Note: Year 2017 only has one observation and will not be plotted. . train[&#39;Month&#39;] = train.index.strftime(&#39;%b&#39;) train[&#39;Year&#39;] = train.index.strftime(&#39;%Y&#39;) f, axs = plt.subplots(1, 2, sharey=True, figsize=(12,6), gridspec_kw={&#39;width_ratios&#39;: [2, 1]}) sns.boxplot(x=&#39;Month&#39;, y=&#39;meantemp&#39;, data=train, ax=axs[0]) sns.boxplot(x=&#39;Year&#39;, y=&#39;meantemp&#39;, data=train[:-1], ax=axs[1]) for i in range(2): axs[i].set_facecolor(&#39;white&#39;) axs[i].xaxis.label.set_size(19) axs[i].spines.right.set_visible(False) axs[i].spines.top.set_visible(False) axs[i].set_title(f&#39;Figure {i+1}&#39;, fontname=&quot;Times New Roman&quot;, size=20, fontweight=&quot;bold&quot;) train = train.drop(columns=[&#39;Month&#39;, &#39;Year&#39;]) . train.head() . meantemp humidity wind_speed meanpressure . date . 2013-01-01 10.000000 | 84.500000 | 0.000000 | 1015.666667 | . 2013-01-02 7.400000 | 92.000000 | 2.980000 | 1017.800000 | . 2013-01-03 7.166667 | 87.000000 | 4.633333 | 1018.666667 | . 2013-01-04 8.666667 | 71.333333 | 1.233333 | 1017.166667 | . 2013-01-05 6.000000 | 86.833333 | 3.700000 | 1016.500000 | . 1.1.4 Density plot . Density of our observations could provide knowledge regarding structure. . Observations from the KDE plot: . The distribution is not Gaussian. | Distribution is right shifted, may be exponential or double Gaussian. | . axs = train.loc[:, &quot;meantemp&quot;].plot(kind=&#39;kde&#39;, figsize=(10, 4)) axs.set_title(&#39;Kernel Density Estimate - meantemp&#39;, fontname=&quot;Times New Roman&quot;, size=20, fontweight=&quot;bold&quot;); . ACF and PACF . Some observations from the ACF and PACF: . Clear seasonal pattern in ACF. | . from statsmodels.graphics.tsaplots import plot_acf from statsmodels.graphics.tsaplots import plot_pacf plt.figure() plt.subplot(211) plot_acf(train.loc[:, &quot;meantemp&quot;], lags=365*2, ax=plt.gca()); plt.subplot(212) plot_pacf(train.loc[:, &quot;meantemp&quot;], lags=50, ax=plt.gca(), method=&#39;ywm&#39;); . Detrend . from scipy import signal temp_d = signal.detrend(train[&#39;meantemp&#39;].values) #plt.plot(train.index.strftime(&#39;%Y-%m&#39;), temp_d, linestyle=&#39;None&#39;, alpha=0.4, marker=&#39;.&#39;) plt.plot(train.index.values, temp_d, linestyle=&#39;None&#39;, alpha=0.5, marker=&#39;.&#39;) #plt.set_title(&#39;meantemp&#39;, fontname=&quot;Times New Roman&quot;, size=20, fontweight=&quot;bold&quot;); . [&lt;matplotlib.lines.Line2D at 0x1ee30d64f40&gt;] . temp_d12 = np.diff(temp_d, 365) . temp_d12[:] . array([ 1.69300373e+109, -1.86291455e+109, 2.02391775e+109, ..., 2.96574340e+109, -3.02971935e+109, 3.08297591e+109]) . train.index[:-365] . DatetimeIndex([&#39;2013-01-01&#39;, &#39;2013-01-02&#39;, &#39;2013-01-03&#39;, &#39;2013-01-04&#39;, &#39;2013-01-05&#39;, &#39;2013-01-06&#39;, &#39;2013-01-07&#39;, &#39;2013-01-08&#39;, &#39;2013-01-09&#39;, &#39;2013-01-10&#39;, ... &#39;2015-12-24&#39;, &#39;2015-12-25&#39;, &#39;2015-12-26&#39;, &#39;2015-12-27&#39;, &#39;2015-12-28&#39;, &#39;2015-12-29&#39;, &#39;2015-12-30&#39;, &#39;2015-12-31&#39;, &#39;2016-01-01&#39;, &#39;2016-01-02&#39;], dtype=&#39;datetime64[ns]&#39;, name=&#39;date&#39;, length=1097, freq=None) . plt.plot(train.index[:-365], temp_d12, linewidth=0.3); . Augmented Dickey-Fuller Test . from statsmodels.tsa.stattools import adfuller result = adfuller(temp_d12, autolag=&#39;AIC&#39;) print(&#39;ADF Statistic: %f&#39; % result[0]) print(&#39;p-value: %f&#39; % result[1]) . ADF Statistic: -142.157470 p-value: 0.000000 . 2. ARIMA Models . With a stationary time series, we can move on to building models. . plt.figure(tight_layout=True) # ACF plt.subplot2grid((3, 3), (0, 0)) plot_acf(temp_d12, lags=80, ax=plt.gca()); plt.subplot2grid((3, 3), (0, 1), colspan=2) plot_acf(temp_d12, lags=600, ax=plt.gca()); # PACF plt.subplot2grid((3, 3), (1, 0)) plot_pacf(temp_d12, lags=50, ax=plt.gca(), method=&#39;ywm&#39;, zero=False); plt.subplot2grid((3, 3), (1, 1), colspan=2) plot_pacf(temp_d12, lags=50, ax=plt.gca(), method=&#39;ywm&#39;, zero=False); . Manually configured ARIMA . https://people.duke.edu/~rnau/411arim3.htm Looking at the ACF and PACF, no simple model can be determained. One observation is that seasonal terms does not seem to be needed. . # Max order for one term x = 10 arima_grid = np.array(np.meshgrid(range(x), 0, range(x))).T.reshape(-1,3) # Model order max of 10 arima_grid = arima_grid[np.sum(arima_grid, axis = 1)&lt;11] . https://groups.google.com/g/pystatsmodels/c/S_Fo53F25Rk . from statsmodels.tsa.arima.model import ARIMA def model_aic(dt, parameters): &quot;&quot;&quot; Create ARIMA model and return corresponding AIC score. &quot;&quot;&quot; model = ARIMA(dt, order=parameters) model_fit = model.fit(method_kwargs={&quot;warn_convergence&quot;: False}) return model_fit.aic aics = np.hstack((arima_grid, np.zeros((arima_grid.shape[0], 1)))) for i, parameters in enumerate(arima_grid): aics[i,3] = model_aic(train.meantemp.values, parameters) aics = pd.DataFrame(aics) . C: Users andre venv ts_env lib site-packages statsmodels tsa statespace sarimax.py:966: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters. warn(&#39;Non-stationary starting autoregressive parameters&#39; C: Users andre venv ts_env lib site-packages statsmodels tsa statespace sarimax.py:978: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters. warn(&#39;Non-invertible starting MA parameters found.&#39; . aics.sort_values(3).head() . 0 1 2 3 . 48 4.0 | 0.0 | 5.0 | 5525.932485 | . 47 3.0 | 0.0 | 5.0 | 5546.701829 | . 30 1.0 | 0.0 | 3.0 | 5548.704623 | . 31 2.0 | 0.0 | 3.0 | 5548.747078 | . 38 1.0 | 0.0 | 4.0 | 5549.102134 | . from pmdarima.arima import auto_arima stepwise_fit = auto_arima(train.meantemp.values, start_p=1, start_q=1, max_p=10, max_q=10, start_P=0, seasonal=False, d=0, D=0, max_order=10, with_intercept=True, trace=True, error_action=&#39;ignore&#39;, # don&#39;t want to know if an order does not work suppress_warnings=True, # don&#39;t want convergence warnings stepwise=False) # Stepwise at false for grid-search . ARIMA(0,0,0)(0,0,0)[0] intercept : AIC=9983.725, Time=0.02 sec ARIMA(0,0,1)(0,0,0)[0] intercept : AIC=8469.027, Time=0.13 sec ARIMA(0,0,2)(0,0,0)[0] intercept : AIC=7528.393, Time=0.20 sec ARIMA(0,0,3)(0,0,0)[0] intercept : AIC=7002.507, Time=0.40 sec ARIMA(0,0,4)(0,0,0)[0] intercept : AIC=6682.293, Time=0.61 sec ARIMA(0,0,5)(0,0,0)[0] intercept : AIC=6484.283, Time=0.74 sec ARIMA(0,0,6)(0,0,0)[0] intercept : AIC=6329.897, Time=0.85 sec ARIMA(0,0,7)(0,0,0)[0] intercept : AIC=6248.609, Time=1.01 sec ARIMA(0,0,8)(0,0,0)[0] intercept : AIC=6121.374, Time=1.18 sec ARIMA(0,0,9)(0,0,0)[0] intercept : AIC=6037.565, Time=1.57 sec ARIMA(0,0,10)(0,0,0)[0] intercept : AIC=6011.498, Time=1.88 sec ARIMA(1,0,0)(0,0,0)[0] intercept : AIC=5643.032, Time=0.11 sec ARIMA(1,0,1)(0,0,0)[0] intercept : AIC=5602.211, Time=0.19 sec ARIMA(1,0,2)(0,0,0)[0] intercept : AIC=5577.976, Time=0.32 sec ARIMA(1,0,3)(0,0,0)[0] intercept : AIC=5548.705, Time=0.42 sec ARIMA(1,0,4)(0,0,0)[0] intercept : AIC=5549.102, Time=0.57 sec ARIMA(1,0,5)(0,0,0)[0] intercept : AIC=5550.607, Time=0.63 sec ARIMA(1,0,6)(0,0,0)[0] intercept : AIC=5552.599, Time=0.85 sec ARIMA(1,0,7)(0,0,0)[0] intercept : AIC=5553.987, Time=0.88 sec ARIMA(1,0,8)(0,0,0)[0] intercept : AIC=5555.403, Time=1.12 sec ARIMA(1,0,9)(0,0,0)[0] intercept : AIC=5555.909, Time=1.45 sec ARIMA(2,0,0)(0,0,0)[0] intercept : AIC=5611.863, Time=0.16 sec ARIMA(2,0,1)(0,0,0)[0] intercept : AIC=5551.068, Time=0.44 sec ARIMA(2,0,2)(0,0,0)[0] intercept : AIC=5552.772, Time=0.68 sec ARIMA(2,0,3)(0,0,0)[0] intercept : AIC=5548.746, Time=0.77 sec ARIMA(2,0,4)(0,0,0)[0] intercept : AIC=5552.679, Time=0.78 sec ARIMA(2,0,5)(0,0,0)[0] intercept : AIC=5552.420, Time=0.67 sec ARIMA(2,0,6)(0,0,0)[0] intercept : AIC=5553.913, Time=1.50 sec ARIMA(2,0,7)(0,0,0)[0] intercept : AIC=5555.142, Time=0.79 sec ARIMA(2,0,8)(0,0,0)[0] intercept : AIC=5556.767, Time=0.97 sec ARIMA(3,0,0)(0,0,0)[0] intercept : AIC=5601.027, Time=0.28 sec ARIMA(3,0,1)(0,0,0)[0] intercept : AIC=5552.702, Time=0.81 sec ARIMA(3,0,2)(0,0,0)[0] intercept : AIC=5552.927, Time=1.04 sec ARIMA(3,0,3)(0,0,0)[0] intercept : AIC=5550.582, Time=1.13 sec ARIMA(3,0,4)(0,0,0)[0] intercept : AIC=5552.273, Time=1.37 sec ARIMA(3,0,5)(0,0,0)[0] intercept : AIC=5550.935, Time=1.86 sec ARIMA(3,0,6)(0,0,0)[0] intercept : AIC=5551.730, Time=2.33 sec ARIMA(3,0,7)(0,0,0)[0] intercept : AIC=5556.715, Time=2.13 sec ARIMA(4,0,0)(0,0,0)[0] intercept : AIC=inf, Time=0.33 sec ARIMA(4,0,1)(0,0,0)[0] intercept : AIC=5549.552, Time=0.89 sec ARIMA(4,0,2)(0,0,0)[0] intercept : AIC=5550.311, Time=1.21 sec ARIMA(4,0,3)(0,0,0)[0] intercept : AIC=5552.752, Time=1.26 sec ARIMA(4,0,4)(0,0,0)[0] intercept : AIC=5554.352, Time=1.69 sec ARIMA(4,0,5)(0,0,0)[0] intercept : AIC=5555.633, Time=2.15 sec ARIMA(4,0,6)(0,0,0)[0] intercept : AIC=inf, Time=2.43 sec ARIMA(5,0,0)(0,0,0)[0] intercept : AIC=inf, Time=0.45 sec ARIMA(5,0,1)(0,0,0)[0] intercept : AIC=5550.543, Time=1.28 sec ARIMA(5,0,2)(0,0,0)[0] intercept : AIC=5552.806, Time=0.78 sec ARIMA(5,0,3)(0,0,0)[0] intercept : AIC=5553.321, Time=1.52 sec ARIMA(5,0,4)(0,0,0)[0] intercept : AIC=5554.904, Time=1.99 sec ARIMA(5,0,5)(0,0,0)[0] intercept : AIC=5553.663, Time=2.16 sec ARIMA(6,0,0)(0,0,0)[0] intercept : AIC=inf, Time=0.54 sec ARIMA(6,0,1)(0,0,0)[0] intercept : AIC=5552.448, Time=1.63 sec ARIMA(6,0,2)(0,0,0)[0] intercept : AIC=5553.658, Time=1.62 sec ARIMA(6,0,3)(0,0,0)[0] intercept : AIC=5554.157, Time=1.74 sec ARIMA(6,0,4)(0,0,0)[0] intercept : AIC=5555.373, Time=2.08 sec ARIMA(7,0,0)(0,0,0)[0] intercept : AIC=inf, Time=0.62 sec ARIMA(7,0,1)(0,0,0)[0] intercept : AIC=5554.412, Time=1.97 sec ARIMA(7,0,2)(0,0,0)[0] intercept : AIC=5555.942, Time=2.15 sec ARIMA(7,0,3)(0,0,0)[0] intercept : AIC=5557.202, Time=1.43 sec ARIMA(8,0,0)(0,0,0)[0] intercept : AIC=inf, Time=0.74 sec ARIMA(8,0,1)(0,0,0)[0] intercept : AIC=5554.664, Time=2.20 sec ARIMA(8,0,2)(0,0,0)[0] intercept : AIC=5557.468, Time=2.30 sec ARIMA(9,0,0)(0,0,0)[0] intercept : AIC=inf, Time=1.02 sec ARIMA(9,0,1)(0,0,0)[0] intercept : AIC=5562.578, Time=0.92 sec ARIMA(10,0,0)(0,0,0)[0] intercept : AIC=inf, Time=1.08 sec Best model: ARIMA(1,0,3)(0,0,0)[0] intercept Total fit time: 73.059 seconds . model = ARIMA(train.meantemp.values, order=(4,0,5)) model_fit = model.fit() print(model_fit.summary()) . SARIMAX Results ============================================================================== Dep. Variable: y No. Observations: 1462 Model: ARIMA(4, 0, 5) Log Likelihood -2751.966 Date: Fri, 11 Mar 2022 AIC 5525.932 Time: 08:13:03 BIC 5584.096 Sample: 0 HQIC 5547.628 - 1462 Covariance Type: opg ============================================================================== coef std err z P&gt;|z| [0.025 0.975] const 17.4324 8.208 2.124 0.034 1.345 33.520 ar.L1 1.5636 0.076 20.456 0.000 1.414 1.713 ar.L2 0.4279 0.077 5.568 0.000 0.277 0.579 ar.L3 -1.5634 0.076 -20.614 0.000 -1.712 -1.415 ar.L4 0.5718 0.076 7.546 0.000 0.423 0.720 ma.L1 -0.8088 0.077 -10.466 0.000 -0.960 -0.657 ma.L2 -0.9944 0.036 -27.537 0.000 -1.065 -0.924 ma.L3 0.7481 0.108 6.949 0.000 0.537 0.959 ma.L4 0.0024 0.034 0.070 0.944 -0.065 0.070 ma.L5 0.0673 0.039 1.740 0.082 -0.009 0.143 sigma2 2.5231 0.078 32.430 0.000 2.371 2.676 =================================================================================== Ljung-Box (L1) (Q): 0.01 Jarque-Bera (JB): 300.71 Prob(Q): 0.94 Prob(JB): 0.00 Heteroskedasticity (H): 0.79 Skew: -0.55 Prob(H) (two-sided): 0.01 Kurtosis: 4.93 =================================================================================== Warnings: [1] Covariance matrix calculated using the outer product of gradients (complex-step). . C: Users andre venv ts_env lib site-packages statsmodels base model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals warnings.warn(&#34;Maximum Likelihood optimization failed to &#34; . from statsmodels.tsa.arima.model import ARIMA # Train AR(2) model model = ARIMA(train.meantemp.values, order=(3,0,5)) model_fit = model.fit() fc = model_fit.get_forecast(12) conf = fc.conf_int(alpha=0.05) # 95% confidence fc_series = pd.Series(fc.predicted_mean) print(fc_series) #print(model_fit.summary()) print(model_fit.aic) . 0 11.462704 1 12.132511 2 12.924559 3 13.093175 4 13.223948 5 13.310749 6 13.352515 7 13.352774 8 13.318770 9 13.260322 10 13.188549 11 13.114618 dtype: float64 5546.701829031677 . C: Users andre venv ts_env lib site-packages statsmodels base model.py:604: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals warnings.warn(&#34;Maximum Likelihood optimization failed to &#34; . plt.figure(figsize=(12,5), dpi=200) plt.plot(temp_d12, label=&#39;training&#39;) plt.plot(fc_series, label=&#39;forecast&#39;) . [&lt;matplotlib.lines.Line2D at 0x1ee3a282a30&gt;] .",
            "url": "https://andreaspalmgren.github.io/ws/2022/03/13/TSA_Climate.html",
            "relUrl": "/2022/03/13/TSA_Climate.html",
            "date": " • Mar 13, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://andreaspalmgren.github.io/ws/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://andreaspalmgren.github.io/ws/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://andreaspalmgren.github.io/ws/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://andreaspalmgren.github.io/ws/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}